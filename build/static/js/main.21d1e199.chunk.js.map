{"version":3,"sources":["terms/terms.md","services/URL.ts","components/MovieCard.jsx","components/MovieSlider.jsx","services/LocalStorageService.js","components/MovieModal.jsx","pages/Home.jsx","components/LoadingSpinner.jsx","pages/Popular.jsx","pages/Search.jsx","components/WishlistCard.jsx","pages/Wishlist.jsx","components/Toast.jsx","pages/SignIn.jsx","pages/MovieDetails.jsx","components/Header.jsx","components/PrivateRoute.jsx","components/ScrollToTop.jsx","App.jsx","index.js"],"names":["module","exports","API_BASE_URL","TMDbAPI","getNowPlaying","async","apiKey","page","arguments","length","undefined","response","axios","get","concat","data","getPopular","searchMovies","query","MovieCard","_ref","movie","onClick","poster_path","title","id","isWishlisted","setIsWishlisted","useState","useEffect","isInWishlist","JSON","parse","localStorage","getItem","some","item","React","createElement","className","src","alt","e","stopPropagation","wishlist","filter","push","setItem","stringify","MovieSlider","movies","onMovieClick","map","key","LocalStorageService","set","value","remove","removeItem","MovieModal","onClose","useNavigate","overview","release_date","vote_average","detailedInfo","setDetailedInfo","error","setError","getApiKey","user","params","api_key","language","console","fetchMovieDetails","original_title","runtime","genres","vote_count","original_language","production_companies","budget","revenue","genre","name","join","toUpperCase","company","toLocaleString","handleWishlist","updatedWishlist","alert","newMovieData","Home","bannerMovie","setBannerMovie","popularMovies","setPopularMovies","genreMovies","setGenreMovies","loadedGenres","setLoadedGenres","setGenres","setWishlist","selectedMovie","setSelectedMovie","isModalOpen","setIsModalOpen","setApiKey","loggedInUser","loadWishlist","storedWishlist","popularData","getPopularMovies","results","slice","Math","floor","random","genreData","getGenres","loadNextGenres","fetchInitialData","newGenreMovies","nextGenres","getMoviesByGenre","genreName","prev","handleMovieClick","style","backgroundImage","backdrop_path","handleCloseModal","LoadingSpinner","Popular","_JSON$parse","popular","setPopular","loading","setLoading","setPage","hasMore","setHasMore","showButton","setShowButton","currentPage","prevMovies","total_pages","fetchPopularMovies","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","prevPage","scrollY","addEventListener","removeEventListener","handleWishlistToggle","onWishlistToggle","fetchWishlist","scrollToTop","scrollTo","top","behavior","Search","navigate","setQuery","selectedGenre","setSelectedGenre","selectedRating","setSelectedRating","selectedLanguage","setSelectedLanguage","selectedYear","setSelectedYear","selectedCertification","setSelectedCertification","setMovies","fetchGenres","fetchMovies","reset","url","queryParams","encodeURIComponent","type","onChange","target","placeholder","Array","_","i","from","handleReset","WishlistCard","onRemoveFromWishlist","onCardClick","Wishlist","useCallback","handleRemoveFromWishlist","handleCardClick","Toast","message","timer","setTimeout","toastElement","querySelector","display","clearTimeout","SignIn","isSignUp","setIsSignUp","formData","setFormData","email","password","confirmPassword","username","rememberMe","agreeTerms","errors","setErrors","toast","setToast","showTermsModal","setShowTermsModal","isClosing","setIsClosing","termsContent","setTermsContent","rememberedUser","find","u","thirtyDays","Date","getTime","timestamp","Kakao","isInitialized","init","validateEmail","test","handleChange","checked","_objectSpread","handleKeyDown","handleSignUp","handleSignIn","Object","keys","users","newUser","loginData","log","handleCardSwitch","validateForm","newErrors","fetch","termsText","then","text","catch","onKeyDown","handleKakaoLogin","Auth","login","success","authObj","API","request","_response$properties","_response$properties2","kakaoUserData","nickname","properties","profileImage","profile_image","fail","ReactMarkdown","MovieDetails","useParams","setMovie","getMovieDetails","Header","isMenuOpen","setIsMenuOpen","Link","to","handleLogout","PrivateRoute","children","kakaoUser","Navigate","ScrollToTop","isVisible","setIsVisible","AppWrapper","isLoading","setIsLoading","setIsInitialized","Promise","resolve","currentPath","location","hash","initializeAuth","Fragment","Routes","Route","path","element","replace","App","Router","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.21d1e199.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/terms.d8c456cc.md\";","import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\n\ninterface TMDbResponse {\n  results: any[];\n  total_pages: number;\n  total_results: number;\n}\n\nconst TMDbAPI = {\n  getNowPlaying: async (apiKey: string, page: number = 1): Promise<TMDbResponse> => {\n    const response = await axios.get(\n      `${API_BASE_URL}/movie/now_playing?api_key=${apiKey}&language=ko-KR&page=${page}`\n    );\n    return response.data;\n  },\n  \n  getPopular: async (apiKey: string, page: number = 1): Promise<TMDbResponse> => {\n    const response = await axios.get(\n      `${API_BASE_URL}/movie/popular?api_key=${apiKey}&language=ko-KR&page=${page}`\n    );\n    return response.data;\n  },\n  \n  searchMovies: async (apiKey: string, query: string, page: number = 1): Promise<TMDbResponse> => {\n    const response = await axios.get(\n      `${API_BASE_URL}/search/movie?api_key=${apiKey}&language=ko-KR&query=${query}&page=${page}`\n    );\n    return response.data;\n  }\n};\n\nexport default TMDbAPI;\n","import React, { useEffect, useState } from 'react';\nimport '../styles/MovieCard.css';\n\nconst MovieCard = ({ movie, onClick }) => {\n  const { poster_path, title, id } = movie;\n  const [isWishlisted, setIsWishlisted] = useState(false);\n\n  // 찜 목록 로컬스토리지에서 불러오기\n  useEffect(() => {\n    const wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    const isInWishlist = wishlist.some((item) => item.id === id);\n    setIsWishlisted(isInWishlist);\n  }, [id]);\n\n  // 찜하기 버튼 클릭 처리\n  const handleWishlistClick = (e) => {\n    e.stopPropagation(); // 부모 요소로의 클릭 이벤트 전파 방지\n    \n    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n\n    if (isWishlisted) {\n      // 이미 찜 목록에 있는 경우 -> 제거\n      wishlist = wishlist.filter((item) => item.id !== id);\n      setIsWishlisted(false);\n    } else {\n      // 찜 목록에 없는 경우 -> 추가\n      wishlist.push(movie);\n      setIsWishlisted(true);\n    }\n\n    // 찜 목록 로컬스토리지에 업데이트\n    localStorage.setItem('wishlist', JSON.stringify(wishlist));\n  };\n\n  return (\n    <div className=\"movie-card\">\n      <img\n        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n        alt={title || \"Movie Poster\"}\n        className={`movie-poster ${isWishlisted ? 'wishlisted' : ''}`}\n        onClick={onClick}\n      />\n      <div className=\"movie-details\">\n        <button\n          className={`wishlist-btn ${isWishlisted ? 'disabled' : ''}`}\n          onClick={handleWishlistClick}\n        >\n          {isWishlisted ? '✅ 찜 완료' : '찜하기'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport MovieCard from './MovieCard';\nimport '../styles/MovieSlider.css';\n\nconst MovieSlider = ({ title, movies, onMovieClick, wishlist }) => {\n  return (\n    <div className=\"movie-slider\">\n      <h2>{title}</h2>\n      <div className=\"slider-container\">\n        {movies.map((movie) => (\n          <MovieCard\n            key={movie.id}\n            movie={movie}\n            onClick={() => onMovieClick(movie)}\n            isWishlisted={wishlist.some((item) => item.id === movie.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieSlider;\n","const LocalStorageService = {\n  get: (key) => {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  },\n\n  set: (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n\n  remove: (key) => {\n    localStorage.removeItem(key);\n  },\n};\n\nexport default LocalStorageService;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport LocalStorageService from '../services/LocalStorageService';\nimport '../styles/MovieModal.css';\n\nconst MovieModal = ({ movie, onClose }) => {\n  const navigate = useNavigate();\n  const { id, title, overview, release_date, vote_average, poster_path } = movie;\n  const [isWishlisted, setIsWishlisted] = useState(false);\n  const [detailedInfo, setDetailedInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  // API 키 가져오기\n  const getApiKey = () => {\n    const user = JSON.parse(localStorage.getItem('loggedInUser'));\n    return user?.apiKey;\n  };\n\n  // 영화 세부 정보 가져오기\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const apiKey = getApiKey();\n      \n      if (!apiKey) {\n        setError('API 키를 찾을 수 없습니다.');\n        return;\n      }\n\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${id}`,\n          {\n            params: {\n              api_key: apiKey,\n              language: 'ko-KR'\n            }\n          }\n        );\n        setDetailedInfo(response.data);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n        setError('영화 정보를 불러오는데 실패했습니다.');\n      }\n    };\n\n    fetchMovieDetails();\n  }, [id]);\n\n  // 초기 찜 상태 확인\n  useEffect(() => {\n    const wishlist = LocalStorageService.get('wishlist') || [];\n    setIsWishlisted(wishlist.some((item) => item.id === id));\n  }, [id]);\n\n  // 찜 상태 토글\n  const handleWishlist = () => {\n    const wishlist = LocalStorageService.get('wishlist') || [];\n\n    if (isWishlisted) {\n      // 찜 해제\n      const updatedWishlist = wishlist.filter((item) => item.id !== id);\n      LocalStorageService.set('wishlist', updatedWishlist);\n      alert(`${title}을(를) 찜 목록에서 제거했습니다!`);\n    } else {\n      // 찜 추가\n      const newMovieData = {\n        id,\n        title,\n        overview,\n        release_date,\n        vote_average,\n        poster_path,\n      };\n      wishlist.push(newMovieData);\n      LocalStorageService.set('wishlist', wishlist);\n      alert(`${title}을(를) 찜 목록에 추가했습니다!`);\n    }\n\n    setIsWishlisted(!isWishlisted);\n  };\n\n  if (error) {\n    return (\n      <div className=\"modal-overlay\" onClick={onClose}>\n        <div className=\"modal-content\">\n          <button className=\"close-button\" onClick={onClose}>×</button>\n          <p className=\"error-message\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!detailedInfo) {\n    return (\n      <div className=\"modal-overlay\" onClick={onClose}>\n        <div className=\"modal-content\">\n          <button className=\"close-button\" onClick={onClose}>×</button>\n          <p className=\"loading-message\">로딩중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const {\n    original_title,\n    runtime,\n    genres,\n    vote_count,\n    original_language,\n    production_companies,\n    budget,\n    revenue,\n  } = detailedInfo;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <button className=\"close-button\" onClick={onClose}>\n          ×\n        </button>\n        <div className=\"modal-header\">\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            alt={title}\n            className=\"modal-poster\"\n          />\n          <div className=\"modal-info\">\n            <h2>{title}</h2>\n            <p>\n              <strong>원제목:</strong> {original_title}\n            </p>\n            <p>\n              <strong>개봉일:</strong> {release_date}\n            </p>\n            <p>\n              <strong>평점:</strong> {vote_average} ({vote_count}명 투표)\n            </p>\n            <p>\n              <strong>장르:</strong> {genres.map((genre) => genre.name).join(', ')}\n            </p>\n            <p>\n              <strong>러닝 타임:</strong> {runtime}분\n            </p>\n            <p>\n              <strong>언어:</strong> {original_language.toUpperCase()}\n            </p>\n            <p>\n              <strong>제작사:</strong>{' '}\n              {production_companies.length\n                ? production_companies.map((company) => company.name).join(', ')\n                : '정보 없음'}\n            </p>\n            <p>\n              <strong>예산:</strong> ${budget.toLocaleString()}\n            </p>\n            <p>\n              <strong>수익:</strong> ${revenue.toLocaleString()}\n            </p>\n            <p>\n              <strong>줄거리:</strong> {overview || '줄거리가 없습니다.'}\n            </p>\n            <button\n              className={`wishlist-button ${isWishlisted ? 'active' : ''}`}\n              onClick={handleWishlist}\n            >\n              {isWishlisted ? '찜 해제' : '찜하기'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieModal;\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport TMDbAPI from '../services/URL.ts';\nimport MovieSlider from '../components/MovieSlider';\nimport MovieModal from '../components/MovieModal';\nimport '../styles/Home.css';\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const [bannerMovie, setBannerMovie] = useState(null); // 메인 배너 영화\n  const [popularMovies, setPopularMovies] = useState([]); // 인기 영화\n  const [genreMovies, setGenreMovies] = useState([]); // 로드된 장르별 영화\n  const [loadedGenres, setLoadedGenres] = useState([]); // 이미 로드된 장르\n  const [genres, setGenres] = useState([]); // 전체 장르 목록\n  const [wishlist, setWishlist] = useState([]); // 찜 목록\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [apiKey, setApiKey] = useState(() => {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    return loggedInUser?.apiKey || null;\n  });\n\n  // 찜 목록 로드 함수\n  const loadWishlist = () => {\n    const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    setWishlist(storedWishlist);\n  };\n\n  useEffect(() => {\n    loadWishlist(); // 초기 로드 시 찜 목록 가져오기\n  }, []);\n\n  useEffect(() => {\n    if (apiKey) {\n      const fetchInitialData = async () => {\n        try {\n          const popularData = await TMDbAPI.getPopularMovies(apiKey);\n          setPopularMovies(popularData.results.slice(0, 10));\n          setBannerMovie(\n            popularData.results[Math.floor(Math.random() * popularData.results.length)]\n          );\n\n          const genreData = await TMDbAPI.getGenres(apiKey);\n          setGenres(genreData.genres);\n          loadNextGenres(genreData.genres.slice(0, 5));\n        } catch (error) {\n          console.error('Error fetching initial data:', error);\n        }\n      };\n\n      fetchInitialData();\n    }\n  }, [apiKey]);\n\n  const loadNextGenres = async (nextGenres) => {\n    const newGenreMovies = [];\n    for (const genre of nextGenres) {\n      try {\n        const movies = await TMDbAPI.getMoviesByGenre(apiKey, genre.id);\n        newGenreMovies.push({ genreName: genre.name, movies: movies.results.slice(0, 10) });\n      } catch (error) {\n        console.error(`Error loading movies for genre: ${genre.name}`, error);\n      }\n    }\n    setGenreMovies((prev) => [...prev, ...newGenreMovies]);\n    setLoadedGenres((prev) => [...prev, ...nextGenres]);\n  };\n\n  const handleMovieClick = (movie) => {\n    setSelectedMovie(movie);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedMovie(null);\n    setIsModalOpen(false);\n    loadWishlist(); // 모달 닫힐 때 찜 목록 다시 로드\n  };\n\n  return (\n    <div className=\"home\">\n      {bannerMovie && (\n        <div\n          className=\"banner\"\n          style={{\n            backgroundImage: `url(https://image.tmdb.org/t/p/original/${bannerMovie.backdrop_path})`,\n          }}\n        >\n          <div className=\"banner-overlay\">\n            <div className=\"banner-content\">\n              <h1>{bannerMovie.title}</h1>\n              <p>{bannerMovie.overview}</p>\n              <div className=\"banner-buttons\">\n                <button className=\"play-button\" onClick={() => alert('재생 기능은 아직 구현되지 않았습니다.')}>\n                  재생\n                </button>\n                <button\n                  className=\"details-button\"\n                  onClick={() => handleMovieClick(bannerMovie)}\n                >\n                  상세정보\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      <MovieSlider title=\"지금 뜨는 콘텐츠\" movies={popularMovies} onMovieClick={handleMovieClick} wishlist={wishlist} />\n      {genreMovies.map(({ genreName, movies }) => (\n        <MovieSlider\n          key={genreName}\n          title={genreName}\n          movies={movies}\n          onMovieClick={handleMovieClick}\n          wishlist={wishlist}\n        />\n      ))}\n      {isModalOpen && selectedMovie && (\n        <MovieModal movie={selectedMovie} onClose={handleCloseModal} />\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport '../styles/LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"loading-spinner\">\n      <div className=\"spinner\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React, { useEffect, useState } from 'react';\nimport TMDbAPI from '../services/URL.ts';\nimport MovieCard from '../components/MovieCard';\nimport MovieModal from '../components/MovieModal'; // 모달 컴포넌트 추가\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport '../styles/Popular.css';\n\nconst Popular = () => {\n  const apiKey = JSON.parse(localStorage.getItem('loggedInUser'))?.apiKey;\n\n  const [popular, setPopular] = useState([]); // 영화 데이터\n  const [loading, setLoading] = useState(false); // 로딩 상태\n  const [page, setPage] = useState(1); // 현재 페이지\n  const [hasMore, setHasMore] = useState(true); // 더 불러올 데이터가 있는지 여부\n  const [selectedMovie, setSelectedMovie] = useState(null); // 선택된 영화\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 상태\n  const [showButton, setShowButton] = useState(false); // 맨 위로 버튼 표시 상태\n  const [wishlist, setWishlist] = useState([]);\n  \n  const loadWishlist = () => {\n    const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    setWishlist([...storedWishlist]); // 새로운 배열로 업데이트해 React가 감지\n  };\n\n\n  // 초기 찜 목록 로드\n  useEffect(() => {\n    loadWishlist();\n  }, []);\n  \n  // API 호출 함수\n  const fetchPopularMovies = async (currentPage) => {\n    if (!apiKey || loading) return;\n\n    setLoading(true);\n\n    try {\n      const data = await TMDbAPI.getPopularMovies(apiKey, currentPage);\n      setPopular((prevMovies) => [...prevMovies, ...data.results]);\n      setHasMore(data.page < data.total_pages);\n    } catch (error) {\n      console.error('Error fetching popular movies:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 초기 데이터 로드 및 페이지 번호 변경 시 호출\n  useEffect(() => {\n    fetchPopularMovies(page);\n  }, [page, apiKey]);\n\n  // 스크롤 이벤트 핸들러\n  const handleScroll = () => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop >=\n        document.documentElement.offsetHeight - 100 && // 하단 100px 근처\n      !loading &&\n      hasMore\n    ) {\n      setPage((prevPage) => prevPage + 1); // 다음 페이지 요청\n    }\n\n    // 맨 위로 버튼 표시 상태 업데이트\n    if (window.scrollY > 300) {\n      setShowButton(true);\n    } else {\n      setShowButton(false);\n    }\n  };\n\n  // 스크롤 이벤트 등록 및 해제\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [loading, hasMore]);\n\n  // 맨 위로 스크롤\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  // 영화 클릭 시 모달 열기\n  const handleMovieClick = (movie) => {\n    const fetchWishlist = () => {\n      const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n      setWishlist(storedWishlist);\n    };\n\n    fetchWishlist();\n    setSelectedMovie(movie);\n    setIsModalOpen(true);\n  };\n\n  // 모달 닫기\n  const handleCloseModal = () => {\n    setSelectedMovie(null);\n    setIsModalOpen(false);\n    const updatedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    setWishlist(updatedWishlist);\n  };\n\n  const handleWishlistToggle = (movie) => {\n    const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    const isWishlisted = storedWishlist.some((item) => item.id === movie.id);\n  \n    if (isWishlisted) {\n      const updatedWishlist = storedWishlist.filter((item) => item.id !== movie.id);\n      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));\n    } else {\n      storedWishlist.push(movie);\n      localStorage.setItem('wishlist', JSON.stringify(storedWishlist));\n    }\n    setWishlist([...storedWishlist]); // 찜 상태 변경 후 갱신\n  };\n  \n\n  \n\n  useEffect(() => {\n    if (!isModalOpen) {\n      const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n      setWishlist(storedWishlist);\n    }\n  }, [isModalOpen]);  \n\n  return (\n    <div className=\"popular\">\n      <h1>🏆 지금 뜨는 컨텐츠</h1>\n      <div className=\"movie-grid\">\n        {popular.map((movie) => (\n          <MovieCard\n          key={`${movie.id}-${wishlist.some((item) => item.id === movie.id)}`} // 상태 변화 강제 렌더링\n          movie={movie}\n          isWishlisted={wishlist.some((item) => item.id === movie.id)}\n          onWishlistToggle={handleWishlistToggle}\n          onClick={() => handleMovieClick(movie)}\n          />\n        ))}\n      </div>\n      {loading && <LoadingSpinner />}\n      {!hasMore && <p className=\"end-message\">불러올 영화가 더이상 없습니다...!</p>}\n\n      {/* 맨 위로 버튼 */}\n      {showButton && (\n        <button className=\"scroll-to-top\" onClick={scrollToTop}>\n          ↑\n        </button>\n      )}\n\n      {/* 모달 */}\n      {isModalOpen && selectedMovie && (\n        <MovieModal movie={selectedMovie} onClose={handleCloseModal} />\n      )}\n    </div>\n  );\n};\n\nexport default Popular;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport TMDbAPI from '../services/URL.ts';\nimport MovieCard from '../components/MovieCard';\nimport MovieModal from '../components/MovieModal';\nimport '../styles/Search.css';\n\nconst Search = () => {\n  const navigate = useNavigate();\n  \n  const [query, setQuery] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [selectedRating, setSelectedRating] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [selectedYear, setSelectedYear] = useState(''); // 개봉년도\n  const [selectedCertification, setSelectedCertification] = useState(''); // 영화 등급\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [showButton, setShowButton] = useState(false);\n  const [wishlist, setWishlist] = useState([]);\n  const [apiKey, setApiKey] = useState(() => {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    return loggedInUser?.apiKey || null;\n  });\n\n  // 찜 목록 로드 함수\n  const loadWishlist = () => {\n    const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    setWishlist([...storedWishlist]); // 새로운 배열로 업데이트해 React가 감지\n  };\n\n  useEffect(() => {\n    loadWishlist(); // 초기 로드 시 찜 목록 가져오기\n  }, []);\n  \n  useEffect(() => {\n    if (!apiKey) {\n      navigate('/signin');\n    }\n  }, [apiKey, navigate]);\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      if (!apiKey) return;\n\n      try {\n        const genreData = await TMDbAPI.getGenres(apiKey);\n        setGenres(genreData.genres);\n      } catch (error) {\n        console.error('Error fetching genres:', error);\n      }\n    };\n\n    fetchGenres();\n  }, [apiKey]);\n\n  const fetchMovies = async (reset = false) => {\n    if (!apiKey || loading) return;\n\n    setLoading(true);\n\n    try {\n      let url;\n      const queryParams = [\n        `api_key=${apiKey}`,\n        `language=ko-KR`,\n        `page=${page}`,\n      ];\n\n      if (query) {\n        url = `https://api.themoviedb.org/3/search/movie`;\n        queryParams.push(`query=${encodeURIComponent(query)}`);\n      } else {\n        url = `https://api.themoviedb.org/3/discover/movie`;\n        if (selectedGenre) queryParams.push(`with_genres=${selectedGenre}`);\n        if (selectedRating) queryParams.push(`vote_average.gte=${selectedRating}`);\n        if (selectedYear) queryParams.push(`primary_release_year=${selectedYear}`);\n        if (selectedCertification) queryParams.push(`certification_country=US&certification=${selectedCertification}`);\n        if (selectedLanguage) queryParams.push(`with_original_language=${selectedLanguage}`);\n      }\n\n      const response = await axios.get(`${url}?${queryParams.join('&')}`);\n      let results = response.data.results;\n\n      if (reset) {\n        setMovies(results);\n      } else {\n        setMovies((prev) => [...prev, ...results]);\n      }\n\n      setHasMore(results.length > 0);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      setMovies([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setMovies([]);\n    setPage(1);\n    setHasMore(true);\n    fetchMovies(true);\n  }, [query, selectedGenre, selectedRating, selectedLanguage, selectedYear, selectedCertification]);\n\n  useEffect(() => {\n    if (page > 1) {\n      fetchMovies();\n    }\n  }, [page]);\n\n  const handleScroll = () => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop >=\n      document.documentElement.offsetHeight - 200 &&\n      hasMore &&\n      !loading\n    ) {\n      setPage((prev) => prev + 1);\n    }\n\n    if (window.scrollY > 300) {\n      setShowButton(true);\n    } else {\n      setShowButton(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [hasMore, loading]);\n\n  const handleReset = () => {\n    setQuery('');\n    setSelectedGenre('');\n    setSelectedRating('');\n    setSelectedLanguage('');\n    setSelectedYear('');\n    setSelectedCertification('');\n    setMovies([]);\n    setPage(1);\n    setHasMore(true);\n  };\n\n  const handleMovieClick = (movie) => {\n    const fetchWishlist = () => {\n      const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n      setWishlist(storedWishlist);\n    };\n\n    fetchWishlist();\n    setSelectedMovie(movie);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedMovie(null);\n    setIsModalOpen(false);\n    const updatedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    setWishlist(updatedWishlist);\n  };\n\n  const handleWishlistToggle = (movie) => {\n    const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n    const isWishlisted = storedWishlist.some((item) => item.id === movie.id);\n\n    if (isWishlisted) {\n      const updatedWishlist = storedWishlist.filter((item) => item.id !== movie.id);\n      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));\n    } else {\n      storedWishlist.push(movie);\n      localStorage.setItem('wishlist', JSON.stringify(storedWishlist));\n    }\n    loadWishlist();\n  };\n\n  useEffect(() => {\n    if (!isModalOpen) {\n      const storedWishlist = JSON.parse(localStorage.getItem('wishlist')) || [];\n      setWishlist(storedWishlist);\n    }\n  }, [isModalOpen]);\n  \n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <div className=\"search\">\n      <h1>🧐 어떤 영화를 찾으시나요?</h1>\n      <div className=\"filters\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"제목 또는 키워드 입력\"\n        />\n        <br />\n        <select value={selectedGenre} onChange={(e) => setSelectedGenre(e.target.value)}>\n          <option value=\"\">장르 (전체)</option>\n          {genres.map((genre) => (\n            <option key={genre.id} value={genre.id}>\n              {genre.name}\n            </option>\n          ))}\n        </select>\n        <select value={selectedRating} onChange={(e) => setSelectedRating(e.target.value)}>\n          <option value=\"\">평점 (전체)</option>\n          {[...Array(10)].map((_, i) => (\n            <option key={i + 1} value={i + 1}>\n              {i + 1} 이상\n            </option>\n          ))}\n        </select>\n        <select value={selectedLanguage} onChange={(e) => setSelectedLanguage(e.target.value)}>\n          <option value=\"\">언어 (전체)</option>\n          <option value=\"en\">영어 ENG</option>\n          <option value=\"ko\">한국어 KOR</option>\n          <option value=\"ja\">일본어 JPN</option>\n          <option value=\"zh\">미얀마어 MYA</option>\n          <option value=\"de\">독일어 DEU</option>\n          <option value=\"it\">이태리어 ITA</option>\n          <option value=\"ru\">러시아어 RUS</option>\n          <option value=\"es\">스페인어 ESP</option>\n          <option value=\"fr\">프랑스어 FRA</option>\n        </select>\n        <select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>\n          <option value=\"\">개봉년도 (전체)</option>\n          {Array.from({ length: 50 }, (_, i) => (\n            <option key={2023 - i} value={2023 - i}>\n              {2023 - i}\n            </option>\n          ))}\n        </select>\n        <select value={selectedCertification} onChange={(e) => setSelectedCertification(e.target.value)}>\n          <option value=\"\">영화 등급 (전체)</option>\n          <option value=\"G\">G - 전체 관람가</option>\n          <option value=\"PG\">PG - 일부 관람가</option>\n          <option value=\"PG-13\">PG-13 - 13세 이상</option>\n          <option value=\"R\">R - 17세 이상</option>\n          <option value=\"NC-17\">NC-17 - 18세 이상</option>\n        </select>\n        <button type=\"button\" onClick={handleReset}>\n          초기화\n        </button>\n      </div>\n\n      {loading && page === 1 ? (\n        <p>로딩 중...</p>\n      ) : movies.length === 0 ? (\n        <p>검색 결과가 없습니다.</p>\n      ) : (\n        <div className=\"movie-grid\">\n          {movies.map((movie) => (\n            <MovieCard\n            key={`${movie.id}-${wishlist.some((item) => item.id === movie.id)}`} // 상태 변화 강제 렌더링\n            movie={movie}\n            isWishlisted={wishlist.some((item) => item.id === movie.id)}\n            onWishlistToggle={handleWishlistToggle}\n            onClick={() => handleMovieClick(movie)}\n            />\n          ))}\n        </div>\n      )}\n\n      {loading && page > 1 && <p>추가 로딩 중...</p>}\n\n      {isModalOpen && selectedMovie && <MovieModal movie={selectedMovie} onClose={handleCloseModal} />}\n\n      {showButton && (\n        <button className=\"scroll-to-top\" onClick={scrollToTop}>\n          ↑\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport '../styles/WishlistCard.css';\n\nconst WishlistCard = ({ movie, onRemoveFromWishlist, onCardClick }) => {\n  const { id, title, poster_path } = movie;\n\n  const handleRemoveClick = (e) => {\n    e.stopPropagation(); // 클릭 이벤트 버블링 방지\n    onRemoveFromWishlist(movie);\n  };\n\n  return (\n    <div className=\"wishlist-card\" key={id} onClick={onCardClick}>\n      <img\n        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n        alt={title}\n        className=\"wishlist-poster\"\n      />\n      <div className=\"wishlist-details\">\n        <button onClick={handleRemoveClick} className=\"remove-btn\">\n          찜 해제\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WishlistCard;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport LocalStorageService from '../services/LocalStorageService';\nimport WishlistCard from '../components/WishlistCard';\nimport MovieModal from '../components/MovieModal';\nimport '../styles/Wishlist.css';\n\nconst Wishlist = () => {\n  const [wishlist, setWishlist] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null); // 선택된 영화\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 상태\n  const [page, setPage] = useState(1); // 페이지 상태 추가\n  const [loading, setLoading] = useState(false); // 로딩 상태 추가\n\n  // 로컬 스토리지에서 찜한 영화 목록 불러오기\n  const loadWishlist = useCallback(() => {\n    setLoading(true);\n    const storedWishlist = LocalStorageService.get('wishlist') || [];\n    setWishlist(storedWishlist.slice((page - 1) * 10, page * 10)); // prev 제거\n    setLoading(false);\n  }, [page]);\n\n  useEffect(() => {\n    loadWishlist();\n  }, [loadWishlist]);\n\n  // 스크롤 이벤트 핸들러\n  const handleScroll = () => {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) return;\n    setPage((prev) => prev + 1); // 다음 페이지 로드\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  // 찜한 영화 목록에서 삭제\n  const handleRemoveFromWishlist = (movie) => {\n    const storedWishlist = LocalStorageService.get('wishlist') || [];\n    const updatedWishlist = storedWishlist.filter((item) => item.id !== movie.id);\n    LocalStorageService.set('wishlist', updatedWishlist);\n    setWishlist(updatedWishlist.slice(0, page * 10)); // 현재 페이지까지만 표시\n  };\n\n  // 영화 클릭 시 모달 열기\n  const handleCardClick = (movie) => {\n    setSelectedMovie(movie);\n    setIsModalOpen(true);\n  };\n\n  // 모달 닫기 (페이지 리로드)\n  const handleCloseModal = () => {\n    setSelectedMovie(null);\n    setIsModalOpen(false);\n\n    // 찜 목록 다시 로드 (리로딩 대신 업데이트 방식 사용)\n    setWishlist(LocalStorageService.get('wishlist') || []);\n  };\n\n  return (\n    <div className=\"wishlist\">\n      <h1>✅ 찜 목록</h1>\n      {wishlist.length === 0 ? (\n        <p>찜한 영화가 없습니다.</p>\n      ) : (\n        <div className=\"movie-grid\">\n          {wishlist.map((movie) => (\n            <WishlistCard\n              key={movie.id}\n              movie={movie}\n              onRemoveFromWishlist={handleRemoveFromWishlist}\n              onCardClick={() => handleCardClick(movie)} // 카드 클릭 이벤트 전달\n            />\n          ))}\n        </div>\n      )}\n      {loading && <p>로딩 중...</p>} {/* 로딩 중 메시지 추가 */}\n\n      {/* MovieModal 렌더링 */}\n      {isModalOpen && selectedMovie && (\n        <MovieModal\n          movie={selectedMovie}\n          onClose={handleCloseModal} // 모달 닫힘 시 호출\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Wishlist;\n","import React, { useEffect } from 'react';\nimport '../styles/Toast.css';\n\nconst Toast = ({ message, type }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const toastElement = document.querySelector('.toast');\n      if (toastElement) toastElement.style.display = 'none';\n    }, 2000); // 2초 후 자동 닫힘\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className={`toast ${type}`}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default Toast;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Toast from '../components/Toast';\nimport ReactMarkdown from 'react-markdown';\nimport '../styles/SignIn.css';\nimport termsText from '../terms/terms.md';\nimport '../styles/TermsModal.css';\n\nconst TMDB_API_KEY = \"0dddad40b95585e608004ae19df81bd2\";\nconst KAKAO_KEY = \"91d4fd298713928628e55b677c118bd3\";\n\nconst SignIn = () => {\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    apiKey: '',\n    username: '',\n    rememberMe: false,\n    agreeTerms: false,\n  });\n  const [errors, setErrors] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    apiKey: '',\n    username: '',\n    agreeTerms: ''\n  });\n  const [toast, setToast] = useState({ message: '', type: '' });\n  const [showTermsModal, setShowTermsModal] = useState(false);\n  const [isClosing, setIsClosing] = useState(false); // 모달 닫힘 애니메이션 상태\n  const [termsContent, setTermsContent] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // 이미 로그인된 사용자 체크\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    if (loggedInUser) {\n      navigate('/');\n      return;\n    }\n\n    // 자동 로그인 체크\n    const rememberedUser = JSON.parse(localStorage.getItem('rememberMe'));\n    if (rememberedUser) {\n      const users = JSON.parse(localStorage.getItem('users')) || [];\n      const user = users.find((u) => u.email === rememberedUser.email);\n      \n      if (user) {\n        // 30일 이내인 경��에만 자동 로그인\n        const thirtyDays = 30 * 24 * 60 * 60 * 1000; // 30일을 밀리초로 변환\n        if (new Date().getTime() - rememberedUser.timestamp < thirtyDays) {\n          localStorage.setItem('loggedInUser', JSON.stringify(user));\n          navigate('/');\n        } else {\n          // 30일이 지난 경우 rememberMe 데이터 삭제\n          localStorage.removeItem('rememberMe');\n        }\n      }\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    // 카카오 SDK 초기화\n    if (window.Kakao) {\n      if (!window.Kakao.isInitialized()) {\n        window.Kakao.init(KAKAO_KEY);\n      }\n    }\n  }, []);\n\n  const validateEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const validateForm = () => {\n    const { email, password, confirmPassword, agreeTerms, apiKey } = formData;\n    let newErrors = {};\n\n    if (!validateEmail(email)) {\n      newErrors.email = '유효하지 않은 이메일 형식입니다.';\n    }\n    if (isSignUp && password !== confirmPassword) {\n      newErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n    }\n    if (isSignUp && !agreeTerms) {\n      newErrors.agreeTerms = '약관에 동의해야 합니다.';\n    }\n    if (isSignUp && !apiKey) {\n      newErrors.apiKey = 'API 키를 입력해야 합니다.';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      if (isSignUp) {\n        handleSignUp();\n      } else {\n        handleSignIn();\n      }\n    }\n  };\n\n  const handleSignUp = () => {\n    setErrors({});\n    const { email, password, confirmPassword, apiKey, agreeTerms, username } = formData;\n    const errors = {};\n  \n    if (!validateEmail(email)) errors.email = '유효하지 않은 이메일 형식입니다.';\n    if (password !== confirmPassword) errors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n    if (!agreeTerms) errors.agreeTerms = '약관에 동의해야 합니다.';\n    if (!apiKey) errors.apiKey = 'API 키를 입력해야 합니다.';\n    if (!username) errors.username = '사용자 이름을 입력해야 합니다.';\n  \n    if (Object.keys(errors).length > 0) {\n      setErrors(errors);\n      return;\n    }\n  \n    const users = JSON.parse(localStorage.getItem('users')) || [];\n    if (users.some(user => user.email === email)) {\n      setErrors({ email: '이미 등록된 이메일입니다.' });\n      return;\n    }\n  \n    // 새 사용자 정보에 wishlist 추가\n    const newUser = {\n      email,\n      password,\n      apiKey,\n      username,\n      wishlist: []\n    };\n  \n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    setToast({ message: '회원가입 성공!', type: 'success' });\n    setTimeout(() => {\n      setIsSignUp(false); // 로그인 폼으로 전환\n    }, 2000);\n  };\n  const handleSignIn = () => {\n    setErrors({});\n    const { email, password, rememberMe } = formData;\n  \n    if (!validateEmail(email)) {\n      setErrors({ email: '유효하지 않은 이메일 형식입��다.' });\n      return;\n    }\n  \n    const users = JSON.parse(localStorage.getItem('users')) || [];\n    const user = users.find((u) => u.email === email && u.password === password);\n  \n    if (!user) {\n      setErrors({ password: '이메일 또는 비밀번호가 올바르지 않습니다.' });\n      return;\n    }\n  \n    // 로그인 정보 저장 시 필요한 모든 정보를 포함\n    const loginData = {\n      email: user.email,\n      username: user.username,\n      apiKey: user.apiKey,\n      wishlist: user.wishlist || []\n    };\n  \n    console.log('로그인 데이터:', loginData); // 디버깅용\n    localStorage.setItem('loggedInUser', JSON.stringify(loginData));\n  \n    if (rememberMe) {\n      localStorage.setItem('rememberMe', JSON.stringify({\n        email: user.email,\n        timestamp: new Date().getTime()\n      }));\n    } else {\n      localStorage.removeItem('rememberMe');\n    }\n  \n    setToast({ message: '로그인 성공! 메인 페이지로 이동합니다.', type: 'success' });\n    setTimeout(() => {\n      navigate('/');\n    }, 2000);\n  };\n  const handleCardSwitch = () => {\n    setIsSignUp((prev) => !prev);\n    setErrors({}); // 에러 초기화\n  };\n  useEffect(() => {\n    setErrors({});\n  }, [isSignUp]);\n\n  useEffect(() => {\n    validateForm();\n  }, [formData]);\n\n  useEffect(() => {\n    // Load terms and conditions from a separate file\n    fetch(termsText)\n      .then((response) => response.text())\n      .then((text) => setTermsContent(text))\n      .catch((error) => console.error('이용약관 로딩 오류:', error));\n  }, []);\n  \n  const handleCloseModal = () => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setShowTermsModal(false);\n      setIsClosing(false);\n    }, 500); // 애니메이션 시간 (0.5초) 후에 모달을 숨김\n  };\n\n  const handleKakaoLogin = () => {\n    if (!window.Kakao) {\n      setToast({ message: '카카오 SDK 로드 실패', type: 'error' });\n      return;\n    }\n\n    window.Kakao.Auth.login({\n      success: (authObj) => {\n        window.Kakao.API.request({\n          url: '/v2/user/me',\n          success: (response) => {\n            const kakaoUserData = {\n              id: response.id,\n              nickname: response.properties?.nickname,\n              profileImage: response.properties?.profile_image,\n              apiKey: TMDB_API_KEY\n            };\n            \n            localStorage.setItem('kakaoUser', JSON.stringify(kakaoUserData));\n            setToast({ message: '카카오 로그인 성공!', type: 'success' });\n            \n            setTimeout(() => {\n              navigate('/');\n            }, 2000);\n          },\n          fail: (error) => {\n            console.error('카카오 사용자 정보 요청 실패:', error);\n            setToast({ message: '카카오 로그인 실패', type: 'error' });\n          }\n        });\n      },\n      fail: (error) => {\n        console.error('카카오 로그인 실패:', error);\n        setToast({ message: '카카오 로그인 실패', type: 'error' });\n      }\n    });\n  };\n\n  return (\n    <div className=\"signin-container\">\n      <div className=\"card-wrapper\">\n        <div className={`card-container ${isSignUp ? 'sign-up' : 'sign-in'}`}>\n          {/* 로그인 카드 */}\n          <div className=\"card front\">\n            <h2>환영합니다!</h2>\n            <br />\n            <p>본 서비스는 편리하고 효율적인 이용을 위해</p>\n            <p>개인 TMDB API로 영화 데이터를 불러옵니다.</p>\n            <br />\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"이메일\"\n            />\n            {errors.email && <div className=\"error\">{errors.email}</div>}\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"비밀번호\"\n            />\n            {errors.password && <div className=\"error\">{errors.password}</div>}\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"rememberMe\"\n                checked={formData.rememberMe}\n                onChange={handleChange}\n              />\n              <span>로그인 상태 유지</span>\n            </label>\n            <button onClick={handleSignIn}>로그인</button>\n            <button \n              onClick={handleKakaoLogin}\n              className=\"kakao-login-btn\"\n            >\n              카카오로 시작하기\n            </button>\n            <br />\n            <span onClick={handleCardSwitch}>계정이 없으신가요? 회원가입</span>\n          </div>\n\n          {/* 회원가입 카드 */}\n          <div className=\"card back\">\n            <h2>계정 생성</h2>\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n              placeholder=\"사용자 이름\"\n            />\n            {errors.username && <div className=\"error\">{errors.username}</div>}\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"이메일\"\n            />\n            {errors.email && <div className=\"error\">{errors.email}</div>}\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"비밀번호\"\n            />\n            <input\n              type=\"password\"\n              name=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"비밀번호 확인\"\n            />\n            <input\n              type=\"text\"\n              name=\"apiKey\"\n              value={formData.apiKey}\n              onChange={handleChange}\n              placeholder=\"TMDB API 키\"\n            />\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"agreeTerms\"\n                checked={formData.agreeTerms}\n                onChange={handleChange}\n              />\n              <span>약관에 동의합니다</span>\n            </label>\n            {errors.agreeTerms && <div className=\"error\">{errors.agreeTerms}</div>}\n            <term-button onClick={() => setShowTermsModal(true)}>이용약관 보기</term-button>\n            <button onClick={handleSignUp}>회원가입</button>\n            <br />\n            <span onClick={handleCardSwitch}>이미 계정이 있으신가요? 로그인</span>\n          </div>\n        </div>\n      </div>\n      {showTermsModal && (\n        <div className={`terms-modal-overlay ${isClosing ? 'fade-out' : ''}`}>\n          <div className={`terms-modal-content ${isClosing ? 'pop-out' : ''}`}>\n            <button className=\"terms-close-button\" onClick={handleCloseModal}>\n              &times;\n            </button>\n            <ReactMarkdown className=\"markdown-content\">{termsContent}</ReactMarkdown>\n          </div>\n        </div>\n      )}\n      {toast.message && <Toast message={toast.message} type={toast.type} />}\n    </div>\n  );\n};\n\nexport default SignIn;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport TMDbAPI from '../services/URL.ts';\nimport '../styles/MovieDetails.css';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const data = await TMDbAPI.getMovieDetails(id);\n        setMovie(data);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieDetails();\n  }, [id]);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (!movie) {\n    return <p>Movie not found.</p>;\n  }\n\n  return (\n    <div className=\"movie-details-page\">\n      <img\n        src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n        alt={movie.title}\n        className=\"movie-details-poster\"\n      />\n      <div className=\"movie-details-info\">\n        <h1>{movie.title}</h1>\n        <p>{movie.overview}</p>\n        <p>Release Date: {movie.release_date}</p>\n        <p>Rating: {movie.vote_average}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Toast from './Toast';\nimport '../styles/Header.css';\n\nconst Header = () => {\n  const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [toast, setToast] = useState({ message: '', type: '' });\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    localStorage.removeItem('loggedInUser');\n    setToast({ message: '안녕히 가세요, 또 뵙겠습니다!', type: 'success' });\n    setIsModalOpen(false);\n\n    setTimeout(() => {\n      navigate('/signin');\n    }, 2000); // 2초 후 로그인 페이지로 이동\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-logo\">\n        <Link to=\"/\">🎬 JBNU 시네마</Link>\n      </div>\n      <div className=\"menu-icon\" onClick={() => setIsMenuOpen((prev) => !prev)}>\n        ☰\n      </div>\n      <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n        <ul>\n          <li><Link to=\"/\" onClick={() => setIsMenuOpen(false)}>홈</Link></li>\n          <li><Link to=\"/popular\" onClick={() => setIsMenuOpen(false)}>대세 콘텐츠</Link></li>\n          <li><Link to=\"/search\" onClick={() => setIsMenuOpen(false)}>찾아보기</Link></li>\n          <li><Link to=\"/wishlist\" onClick={() => setIsMenuOpen(false)}>내가 찜한 리스트</Link></li>\n          {loggedInUser ? (\n            <li>\n              <button\n                className=\"logout-menu-button\"\n                onClick={() => {\n                  setIsMenuOpen(false);\n                  setIsModalOpen(true);\n                }}\n              >\n                로그아웃\n              </button>\n            </li>\n          ) : (\n            <li>\n              <Link to=\"/signin\" onClick={() => setIsMenuOpen(false)}>로그인</Link>\n            </li>\n          )}\n        </ul>\n      </nav>\n\n      {/* 로그아웃 모달 */}\n      {isModalOpen && (\n        <div className=\"logout-modal-overlay\">\n          <div className=\"logout-modal-content\">\n            <p>로그아웃 하시겠습니까?</p>\n            <div className=\"logout-modal-buttons\">\n              <button onClick={handleLogout}>확인</button>\n              <button onClick={() => setIsModalOpen(false)}>취소</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Toast 메시지 */}\n      {toast.message && <Toast message={toast.message} type={toast.type} />}\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Navigate } from 'react-router-dom';\n\nconst PrivateRoute = ({ children }) => {\n  const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n  const kakaoUser = JSON.parse(localStorage.getItem('kakaoUser'));\n  \n  // 일반 로그인 또는 카카오 로그인 확인\n  const isAuthenticated = !!loggedInUser || !!kakaoUser;\n\n  return isAuthenticated ? children : <Navigate to=\"/signin\" />;\n};\n\nexport default PrivateRoute;\n","import React, { useState, useEffect } from 'react';\nimport '../styles/ScrollToTop.css';\n\nconst ScrollToTop = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleScroll = () => {\n    if (window.scrollY > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <div\n      className={`scroll-to-top ${isVisible ? 'show' : ''}`}\n      onClick={scrollToTop}\n    >\n      ↑\n    </div>\n  );\n};\n\nexport default ScrollToTop;\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Routes, Route, useNavigate, Navigate } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Popular from './pages/Popular';\nimport Search from './pages/Search';\nimport Wishlist from './pages/Wishlist';\nimport SignIn from './pages/SignIn';\nimport MovieDetails from './pages/MovieDetails';\nimport Header from './components/Header';\nimport PrivateRoute from './components/PrivateRoute';\nimport ScrollToTop from './components/ScrollToTop';\n\n// 인증 상태를 체크하는 래퍼 컴포넌트\nconst AppWrapper = () => {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      if (isInitialized) return;\n      \n      try {\n        await new Promise(resolve => setTimeout(resolve, 100));\n        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n        const kakaoUser = JSON.parse(localStorage.getItem('kakaoUser'));\n        const rememberedUser = JSON.parse(localStorage.getItem('rememberMe'));\n        const currentPath = window.location.hash;\n\n        if (loggedInUser || kakaoUser) {\n          if (currentPath === '#/signin') {\n            navigate('/home');\n          }\n        } else if (rememberedUser) {\n          const users = JSON.parse(localStorage.getItem('users')) || [];\n          const user = users.find((u) => u.email === rememberedUser.email);\n          \n          if (user) {\n            const thirtyDays = 30 * 24 * 60 * 60 * 1000;\n            if (new Date().getTime() - rememberedUser.timestamp < thirtyDays) {\n              localStorage.setItem('loggedInUser', JSON.stringify({\n                email: user.email,\n                username: user.username,\n                apiKey: user.apiKey,\n                wishlist: user.wishlist || []\n              }));\n              if (currentPath === '#/signin') {\n                navigate('/home');\n              }\n            } else {\n              localStorage.removeItem('rememberMe');\n              navigate('/signin');\n            }\n          } else {\n            localStorage.removeItem('rememberMe');\n            navigate('/signin');\n          }\n        } else {\n          navigate('/signin');\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        navigate('/signin');\n      } finally {\n        setIsLoading(false);\n        setIsInitialized(true);\n      }\n    };\n\n    initializeAuth();\n  }, [navigate, isInitialized]);\n\n  if (isLoading) {\n    return <div>로딩중...</div>;\n  }\n\n  return (\n    <>\n      <Header />\n      <ScrollToTop />\n      <Routes>\n        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n        <Route path=\"/signin\" element={<SignIn />} />\n        <Route\n          path=\"/home\"\n          element={\n            <PrivateRoute>\n              <Home />\n            </PrivateRoute>\n          }\n        />\n        <Route\n          path=\"/popular\"\n          element={\n            <PrivateRoute>\n              <Popular />\n            </PrivateRoute>\n          }\n        />\n        <Route\n          path=\"/search\"\n          element={\n            <PrivateRoute>\n              <Search />\n            </PrivateRoute>\n          }\n        />\n        <Route\n          path=\"/wishlist\"\n          element={\n            <PrivateRoute>\n              <Wishlist />\n            </PrivateRoute>\n          }\n        />\n        <Route\n          path=\"/movie/:id\"\n          element={\n            <PrivateRoute>\n              <MovieDetails />\n            </PrivateRoute>\n          }\n        />\n      </Routes>\n    </>\n  );\n};\n\n// 메인 App 컴포넌트\nconst App = () => {\n  return (\n    <Router>\n      <AppWrapper />\n    </Router>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/global.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}